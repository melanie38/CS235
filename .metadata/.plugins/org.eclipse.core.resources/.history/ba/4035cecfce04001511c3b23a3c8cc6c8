#pragma once
#include <iostream>
#include <string>
#include "StationInterface.h"
using namespace std;

class Station : public StationInterface
{
	public:
		Station()
		{
			headStation = NULL;
			headStack = NULL;
			headQueue = NULL;
			headDeque = NULL;
			FULL_CAPACITY = 5;
		}
		~Station(){}

		bool find(int car);

		//Part 1--------------------------------------------------------------
		bool addToStation(int car);
		int showCurrentCar();
		bool removeFromStation();

		//Part 2--------------------------------------------------------------
		virtual bool addToStack();
		virtual bool removeFromStack();
		virtual int showTopOfStack();
		virtual int showSizeOfStack();

		//Part 3--------------------------------------------------------------
		virtual bool addToQueue();
		virtual bool removeFromQueue();
		virtual int showTopOfQueue();
		virtual int showSizeOfQueue();

		//Part 4--------------------------------------------------------------
		virtual bool addToDequeLeft();
		virtual bool addToDequeRight();
		virtual bool removeFromDequeLeft();
		virtual bool removeFromDequeRight();
		virtual int showTopOfDequeLeft();
		virtual int showTopOfDequeRight();
		virtual int showSizeOfDeque();

	protected:
		struct Node
		{
			int data;
			Node* next;

			Node(int data, Node* next)
			{
				this->data = data;
				this->next = next;
			}
			~Node(){};
		};
		Node* headStation;
		Node* headStack;
		Node* headQueue;
		Node* headDeque;
		const int FULL_CAPACITY;

		class Stack : public Station
		{
		public:
			Stack(){capacity = 0;}
			~Stack(){}
			bool addToStack();
			bool removeFromStack();
			int showTopOfStack();
			virtual int showSizeOfStack();
		private:
			int capacity;
		};
		class Queue : public Station
		{
		public:
			Queue(){}
			~Queue(){}
			bool addToQueue();
			bool removeFromQueue();
			int showTopOfQueue();
			int showSizeOfQueue();
		};
		class Deque : public Station
		{
		public:
			Deque(){}
			~Deque(){}
			bool addToDequeLeft();
			bool addToDequeRight();
			bool removeFromDequeLeft();
			bool removeFromDequeRight();
			int showTopOfDequeLeft();
			int showTopOfDequeRight();
			int showSizeOfDeque();
		};
};
